// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ThinkElectric.Data;

#nullable disable

namespace ThinkElectric.Data.Migrations
{
    [DbContext(typeof(ThinkElectricDbContext))]
    [Migration("20230805144959_SeedScootersTest")]
    partial class SeedScootersTest
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Accessory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompatibleBrand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompatibleModel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Accessories");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b5c6e6d3-1423-4f03-821e-d4438909f0dd"),
                            City = "Sofia",
                            Country = "Bulgaria",
                            Street = "Vitosha",
                            ZipCode = "1000"
                        },
                        new
                        {
                            Id = new Guid("283a2377-59ae-491e-b70f-ce5f2643e563"),
                            City = "Varna",
                            Country = "Bulgaria",
                            Street = "Levski",
                            ZipCode = "9000"
                        });
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec09bd2a-4c64-476d-9997-e732562b0ab1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8ca88e0-7e3b-415f-b3ee-00d3718f5f2d",
                            Email = "admin@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ABV.BG",
                            NormalizedUserName = "ADMIN@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEHWWQCeGkdgpph4dTBBtshhSVh35a4dMdYdMNdl9DpmlBRwl40fmxy/Z2o8jrEUdew==",
                            PhoneNumber = "0888888888",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("95f65567-3392-47fd-ae6a-95d16dfdbfe2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "29951fed-0e6d-4266-a0af-236d4709db94",
                            Email = "companyuser1@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "CompanyUser1",
                            LastName = "CompanyUser1",
                            LockoutEnabled = false,
                            NormalizedEmail = "COMPANYUSER1@ABV.BG",
                            NormalizedUserName = "COMPANYUSER1@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEMueCRFVIjSmaASIRATSRI77Juq+81qXZTqCs/Xez1tn+Ts43wcFjWCxyMRKKq2Vnw==",
                            PhoneNumber = "0999999999",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "companyuser1@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("553d4978-b893-4670-8808-3c91d6165c82"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b239f01-944c-4f37-afa6-3e66540addc9",
                            Email = "companyuser2@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "CompanyUser2",
                            LastName = "CompanyUser2",
                            LockoutEnabled = false,
                            NormalizedEmail = "COMPANYUSER2@ABV.BG",
                            NormalizedUserName = "COMPANYUSER2@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEDssV6acLaX2FlgMdqCNhL25UrpeZdT6TAr8d1eOzgSUmv/3GQd5uscBeWNNRtNehQ==",
                            PhoneNumber = "0777777777",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "companyuser2@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("a44dad0e-bd5f-4394-9f8d-ad5a31e5c24b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53b91ec1-def8-4bfe-97d9-c3c393b7726a",
                            Email = "buyeruser@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "BuyerUser",
                            LastName = "BuyerUser",
                            LockoutEnabled = false,
                            NormalizedEmail = "BUYERUSER@ABV.BG",
                            NormalizedUserName = "BUYERUSER@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAENizNsJ/HDZXH08TyjvtP4DgD1ZvR0pbYfuA0DiclgDcD4W7GIdDavcmd8Ycm1CRUg==",
                            PhoneNumber = "0666666666",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "buyeruser@abv.bg"
                        });
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Bike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Battery")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("BrakesType")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ChargingTime")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EnginePower")
                        .HasColumnType("int");

                    b.Property<int>("EngineType")
                        .HasColumnType("int");

                    b.Property<string>("FrameMaterial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FrameSize")
                        .HasColumnType("int");

                    b.Property<int>("FrameType")
                        .HasColumnType("int");

                    b.Property<int>("GearsCount")
                        .HasColumnType("int");

                    b.Property<int>("MaxLoad")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Range")
                        .HasColumnType("int");

                    b.Property<int>("SuspensionType")
                        .HasColumnType("int");

                    b.Property<int>("TopSpeed")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.Property<int>("WheelSize")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Bikes");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d6271c21-caa6-46a3-8776-d3152f6a1432"),
                            UserId = new Guid("a44dad0e-bd5f-4394-9f8d-ad5a31e5c24b")
                        });
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FoundedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Website")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0781351-133e-4383-81e7-c95e20fa1273"),
                            AddressId = new Guid("b5c6e6d3-1423-4f03-821e-d4438909f0dd"),
                            Description = "Vistaz is a company that sells electric scooters and bikes. Really good quality!",
                            Email = "vistaz@abv.bg",
                            FoundedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageId = "64ce4237f1bda0c4b930c421",
                            Name = "Vistaz",
                            PhoneNumber = "0888888888",
                            UserId = new Guid("95f65567-3392-47fd-ae6a-95d16dfdbfe2"),
                            Website = "https://vistazExample.bg/"
                        },
                        new
                        {
                            Id = new Guid("5d652ebf-7b4d-430c-9af8-0c02b0256575"),
                            AddressId = new Guid("283a2377-59ae-491e-b70f-ce5f2643e563"),
                            Description = "Green Company is a company that sells high quality electric scooters bikes and accessories. Enjoy our products!",
                            Email = "GreenCompany@abv.bg",
                            FoundedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageId = "64ce53d31dee708ccae9319d",
                            Name = "Green Company",
                            PhoneNumber = "0777777777",
                            UserId = new Guid("553d4978-b893-4670-8808-3c91d6165c82"),
                            Website = "https://GreenCompanyExample.bg/"
                        });
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirmedByUser")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFulfilled")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bd96c711-32e7-483b-b1fe-9c19c1e0a936"),
                            CompanyId = new Guid("c0781351-133e-4383-81e7-c95e20fa1273"),
                            CreatedOn = new DateTime(2023, 8, 5, 14, 49, 58, 960, DateTimeKind.Utc).AddTicks(8021),
                            ImageId = "64ce5c39ad51218262de3f60",
                            IsDeleted = false,
                            Name = "Kaabo Wolf Warrior 10",
                            Price = 4999.99m,
                            ProductType = 1,
                            Quantity = 10
                        },
                        new
                        {
                            Id = new Guid("1728dc0c-96d8-4869-886e-4829db33a103"),
                            CompanyId = new Guid("c0781351-133e-4383-81e7-c95e20fa1273"),
                            CreatedOn = new DateTime(2023, 8, 5, 14, 49, 58, 960, DateTimeKind.Utc).AddTicks(8029),
                            ImageId = "64ce5f7abd83b3123fc9ab71",
                            IsDeleted = false,
                            Name = "Kaabo Mantis King",
                            Price = 2999.99m,
                            ProductType = 1,
                            Quantity = 15
                        });
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Scooter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Battery")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("BrakesType")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ChargingTime")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EnginePower")
                        .HasColumnType("int");

                    b.Property<int>("EngineType")
                        .HasColumnType("int");

                    b.Property<int>("MaxLoad")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Range")
                        .HasColumnType("int");

                    b.Property<int>("TireSize")
                        .HasColumnType("int");

                    b.Property<int>("TopSpeed")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Scooters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3108d779-0c6e-4178-b309-5a9d4ee11d29"),
                            Battery = "Li-Ion 70V 35Ah",
                            BrakesType = 3,
                            Brand = "Kaabo",
                            ChargingTime = 12,
                            Color = "Black",
                            EnginePower = 2400,
                            EngineType = 2,
                            MaxLoad = 150,
                            Model = "Wolf Warrior 10",
                            ProductId = new Guid("bd96c711-32e7-483b-b1fe-9c19c1e0a936"),
                            Range = 110,
                            TireSize = 11,
                            TopSpeed = 80,
                            Type = 2,
                            Weight = 46
                        },
                        new
                        {
                            Id = new Guid("1f884fce-c41c-4489-b249-46c69fe929a2"),
                            Battery = "Li-Ion 60V 24.5Ah",
                            BrakesType = 3,
                            Brand = "Kaabo",
                            ChargingTime = 10,
                            Color = "Black",
                            EnginePower = 2000,
                            EngineType = 2,
                            MaxLoad = 120,
                            Model = "Mantis King",
                            ProductId = new Guid("1728dc0c-96d8-4869-886e-4829db33a103"),
                            Range = 100,
                            TireSize = 10,
                            TopSpeed = 70,
                            Type = 2,
                            Weight = 40
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ThinkElectric.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ThinkElectric.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThinkElectric.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ThinkElectric.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Accessory", b =>
                {
                    b.HasOne("ThinkElectric.Data.Models.Product", "Product")
                        .WithOne("Accessory")
                        .HasForeignKey("ThinkElectric.Data.Models.Accessory", "ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("ThinkElectric.Data.Models.Address", "Address")
                        .WithOne("User")
                        .HasForeignKey("ThinkElectric.Data.Models.ApplicationUser", "AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Bike", b =>
                {
                    b.HasOne("ThinkElectric.Data.Models.Product", "Product")
                        .WithOne("Bike")
                        .HasForeignKey("ThinkElectric.Data.Models.Bike", "ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Cart", b =>
                {
                    b.HasOne("ThinkElectric.Data.Models.ApplicationUser", "User")
                        .WithOne("Cart")
                        .HasForeignKey("ThinkElectric.Data.Models.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.CartItem", b =>
                {
                    b.HasOne("ThinkElectric.Data.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThinkElectric.Data.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Company", b =>
                {
                    b.HasOne("ThinkElectric.Data.Models.Address", "Address")
                        .WithOne("Company")
                        .HasForeignKey("ThinkElectric.Data.Models.Company", "AddressId");

                    b.HasOne("ThinkElectric.Data.Models.ApplicationUser", "User")
                        .WithOne("Company")
                        .HasForeignKey("ThinkElectric.Data.Models.Company", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Order", b =>
                {
                    b.HasOne("ThinkElectric.Data.Models.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.OrderItem", b =>
                {
                    b.HasOne("ThinkElectric.Data.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThinkElectric.Data.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Product", b =>
                {
                    b.HasOne("ThinkElectric.Data.Models.Company", "Company")
                        .WithMany("Products")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Review", b =>
                {
                    b.HasOne("ThinkElectric.Data.Models.Company", "Company")
                        .WithMany("Reviews")
                        .HasForeignKey("CompanyId");

                    b.HasOne("ThinkElectric.Data.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ThinkElectric.Data.Models.ApplicationUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Scooter", b =>
                {
                    b.HasOne("ThinkElectric.Data.Models.Product", "Product")
                        .WithOne("Scooter")
                        .HasForeignKey("ThinkElectric.Data.Models.Scooter", "ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Address", b =>
                {
                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Company");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Company", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Product", b =>
                {
                    b.Navigation("Accessory");

                    b.Navigation("Bike");

                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");

                    b.Navigation("Scooter");
                });
#pragma warning restore 612, 618
        }
    }
}
