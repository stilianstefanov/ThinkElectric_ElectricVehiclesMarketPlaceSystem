// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ThinkElectric.Data;

#nullable disable

namespace ThinkElectric.Data.Migrations
{
    [DbContext(typeof(ThinkElectricDbContext))]
    [Migration("20230809074455_AddedIsBlockedProperty")]
    partial class AddedIsBlockedProperty
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Accessory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompatibleBrand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompatibleModel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Accessories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("58605343-b867-4905-bfa3-364a8d3940d3"),
                            Brand = "Kaabo",
                            CompatibleBrand = "Kaabo",
                            CompatibleModel = "Mantis",
                            Description = "Original Kaabo bag for the your Kaabo Mantis scooter!",
                            ProductId = new Guid("3e044b98-8123-4273-b51f-9cf0dfc13760")
                        },
                        new
                        {
                            Id = new Guid("9318d0ea-30db-4431-9c30-ae1993f17728"),
                            Brand = "Kaabo",
                            CompatibleBrand = "Kaabo",
                            CompatibleModel = "Wolf Warrior",
                            Description = "Original Kaabo lock for your kaabo wolf warrior scooter!",
                            ProductId = new Guid("d2ab0180-a9b8-470e-8a0f-9acaccb0c9bc")
                        },
                        new
                        {
                            Id = new Guid("ae2bbad3-a635-4860-b2c0-3260f87ce97b"),
                            Brand = "SideTech",
                            CompatibleBrand = "Xiaomi",
                            CompatibleModel = "Pro 2",
                            Description = "High quality side mirrors for Xiaomi Pro2 scooters!",
                            ProductId = new Guid("8fe19082-5089-4ac5-88d9-51fdfa48fe10")
                        });
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b5c6e6d3-1423-4f03-821e-d4438909f0dd"),
                            City = "Sofia",
                            Country = "Bulgaria",
                            Street = "Vitosha",
                            ZipCode = "1000"
                        },
                        new
                        {
                            Id = new Guid("283a2377-59ae-491e-b70f-ce5f2643e563"),
                            City = "Varna",
                            Country = "Bulgaria",
                            Street = "Levski",
                            ZipCode = "9000"
                        });
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec09bd2a-4c64-476d-9997-e732562b0ab1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1dbcd94b-ac3b-4c07-91b7-8865908b6b49",
                            Email = "admin@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            IsBlocked = false,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ABV.BG",
                            NormalizedUserName = "ADMIN@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEGJiZc3WWBRu5gMpIcGtqFea4+72cL3vrGDvyaJSZyCJ/ugo9vuHix/G4jfTvEzt+w==",
                            PhoneNumber = "0888888888",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("95f65567-3392-47fd-ae6a-95d16dfdbfe2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "72af9962-241d-4a2d-ab08-221ed202ca89",
                            Email = "companyuser1@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "CompanyUser1",
                            IsBlocked = false,
                            LastName = "CompanyUser1",
                            LockoutEnabled = false,
                            NormalizedEmail = "COMPANYUSER1@ABV.BG",
                            NormalizedUserName = "COMPANYUSER1@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAELUWSCGdD5JRPG3pgq6iVkOy+OW2T2CsXboRJ49Y/R0UdWeJTodDHyWr8OKBNFbfhQ==",
                            PhoneNumber = "0999999999",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "companyuser1@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("553d4978-b893-4670-8808-3c91d6165c82"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4bfe76e-de09-4385-bca9-989ee6ee745c",
                            Email = "companyuser2@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "CompanyUser2",
                            IsBlocked = false,
                            LastName = "CompanyUser2",
                            LockoutEnabled = false,
                            NormalizedEmail = "COMPANYUSER2@ABV.BG",
                            NormalizedUserName = "COMPANYUSER2@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEOx5D58X7N48HEJyPAjpVw5nA+On14nOsVl3h7RPzlCRehQY0eXwRCuvm5UaHOJILA==",
                            PhoneNumber = "0777777777",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "companyuser2@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("a44dad0e-bd5f-4394-9f8d-ad5a31e5c24b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4452d379-9773-4604-95b4-df83dcdc9aac",
                            Email = "buyeruser@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "BuyerUser",
                            IsBlocked = false,
                            LastName = "BuyerUser",
                            LockoutEnabled = false,
                            NormalizedEmail = "BUYERUSER@ABV.BG",
                            NormalizedUserName = "BUYERUSER@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEOPx7nc1ARqF6RnJYJ3T2XB7nFiA2NJba8s2XwZgCVrVFPq1TKfSgKEXyN2iIdei2w==",
                            PhoneNumber = "0666666666",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "buyeruser@abv.bg"
                        });
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Bike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Battery")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("BrakesType")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ChargingTime")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EnginePower")
                        .HasColumnType("int");

                    b.Property<int>("EngineType")
                        .HasColumnType("int");

                    b.Property<string>("FrameMaterial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FrameSize")
                        .HasColumnType("int");

                    b.Property<int>("FrameType")
                        .HasColumnType("int");

                    b.Property<int>("GearsCount")
                        .HasColumnType("int");

                    b.Property<int>("MaxLoad")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Range")
                        .HasColumnType("int");

                    b.Property<int>("SuspensionType")
                        .HasColumnType("int");

                    b.Property<int>("TopSpeed")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.Property<int>("WheelSize")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Bikes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c2a92ec-55d2-46e0-841b-9024c1659cb1"),
                            Battery = "48V 13Ah",
                            BrakesType = 3,
                            Brand = "ADO",
                            ChargingTime = 6,
                            Color = "Black",
                            EnginePower = 250,
                            EngineType = 1,
                            FrameMaterial = "Aluminum",
                            FrameSize = 20,
                            FrameType = 1,
                            GearsCount = 7,
                            MaxLoad = 120,
                            Model = "A16XE",
                            ProductId = new Guid("0d233dd0-bd97-4bee-bc9e-dd96ccef5d12"),
                            Range = 60,
                            SuspensionType = 2,
                            TopSpeed = 25,
                            Type = 1,
                            Weight = 25,
                            WheelSize = 15
                        },
                        new
                        {
                            Id = new Guid("e56a719f-ad51-4bfa-b24b-ead6ef17192c"),
                            Battery = "48V 15Ah",
                            BrakesType = 2,
                            Brand = "ADO",
                            ChargingTime = 7,
                            Color = "Gray",
                            EnginePower = 300,
                            EngineType = 2,
                            FrameMaterial = "Aluminum",
                            FrameSize = 18,
                            FrameType = 1,
                            GearsCount = 6,
                            MaxLoad = 100,
                            Model = "A20 AIR",
                            ProductId = new Guid("f6b1216e-e1a6-4b83-a2b4-dc58f30d0e8e"),
                            Range = 50,
                            SuspensionType = 2,
                            TopSpeed = 35,
                            Type = 1,
                            Weight = 20,
                            WheelSize = 14
                        },
                        new
                        {
                            Id = new Guid("5d9ec56d-d23a-49cb-b7e8-39ebd8f5c302"),
                            Battery = "48V 20Ah",
                            BrakesType = 3,
                            Brand = "ADO",
                            ChargingTime = 9,
                            Color = "Black",
                            EnginePower = 600,
                            EngineType = 1,
                            FrameMaterial = "Carbon",
                            FrameSize = 22,
                            FrameType = 2,
                            GearsCount = 10,
                            MaxLoad = 150,
                            Model = "20 F Beast",
                            ProductId = new Guid("485b227b-69d8-4a3c-bf73-7f25007225c5"),
                            Range = 70,
                            SuspensionType = 4,
                            TopSpeed = 40,
                            Type = 2,
                            Weight = 35,
                            WheelSize = 18
                        });
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d6271c21-caa6-46a3-8776-d3152f6a1432"),
                            UserId = new Guid("a44dad0e-bd5f-4394-9f8d-ad5a31e5c24b")
                        },
                        new
                        {
                            Id = new Guid("3226ee7e-6e28-4c7c-b338-9ea6df852957"),
                            UserId = new Guid("ec09bd2a-4c64-476d-9997-e732562b0ab1")
                        });
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FoundedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Website")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0781351-133e-4383-81e7-c95e20fa1273"),
                            AddressId = new Guid("b5c6e6d3-1423-4f03-821e-d4438909f0dd"),
                            Description = "Vistaz is a company that sells electric scooters and bikes. Really good quality!",
                            Email = "vistaz@abv.bg",
                            FoundedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageId = "64ce4237f1bda0c4b930c421",
                            IsBlocked = false,
                            Name = "Vistaz",
                            PhoneNumber = "0888888888",
                            UserId = new Guid("95f65567-3392-47fd-ae6a-95d16dfdbfe2"),
                            Website = "https://vistazExample.bg/"
                        },
                        new
                        {
                            Id = new Guid("5d652ebf-7b4d-430c-9af8-0c02b0256575"),
                            AddressId = new Guid("283a2377-59ae-491e-b70f-ce5f2643e563"),
                            Description = "Green Company is a company that sells high quality electric scooters bikes and accessories. Enjoy our products!",
                            Email = "GreenCompany@abv.bg",
                            FoundedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageId = "64ce53d31dee708ccae9319d",
                            IsBlocked = false,
                            Name = "Green Company",
                            PhoneNumber = "0777777777",
                            UserId = new Guid("553d4978-b893-4670-8808-3c91d6165c82"),
                            Website = "https://GreenCompanyExample.bg/"
                        });
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirmedByUser")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFulfilled")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bd96c711-32e7-483b-b1fe-9c19c1e0a936"),
                            CompanyId = new Guid("c0781351-133e-4383-81e7-c95e20fa1273"),
                            CreatedOn = new DateTime(2023, 7, 25, 8, 45, 25, 0, DateTimeKind.Unspecified),
                            ImageId = "64ce5c39ad51218262de3f60",
                            IsDeleted = false,
                            Name = "Kaabo Wolf Warrior 10",
                            Price = 4999.99m,
                            ProductType = 1,
                            Quantity = 10
                        },
                        new
                        {
                            Id = new Guid("1728dc0c-96d8-4869-886e-4829db33a103"),
                            CompanyId = new Guid("c0781351-133e-4383-81e7-c95e20fa1273"),
                            CreatedOn = new DateTime(2023, 7, 24, 8, 45, 25, 0, DateTimeKind.Unspecified),
                            ImageId = "64ce5f7abd83b3123fc9ab71",
                            IsDeleted = false,
                            Name = "Kaabo Mantis King",
                            Price = 2999.99m,
                            ProductType = 1,
                            Quantity = 15
                        },
                        new
                        {
                            Id = new Guid("67245662-bc0a-4f41-b53e-a9fb4bbdaa9f"),
                            CompanyId = new Guid("c0781351-133e-4383-81e7-c95e20fa1273"),
                            CreatedOn = new DateTime(2023, 7, 20, 7, 45, 25, 0, DateTimeKind.Unspecified),
                            ImageId = "64ce64743037f396fd344914",
                            IsDeleted = false,
                            Name = "Kaabo Mantis 10 Pro",
                            Price = 1500.99m,
                            ProductType = 1,
                            Quantity = 20
                        },
                        new
                        {
                            Id = new Guid("253a48e4-63c2-4564-b911-b098f37d8370"),
                            CompanyId = new Guid("5d652ebf-7b4d-430c-9af8-0c02b0256575"),
                            CreatedOn = new DateTime(2023, 5, 25, 8, 45, 25, 0, DateTimeKind.Unspecified),
                            ImageId = "64ce66572b18cc1f74d4f76b",
                            IsDeleted = false,
                            Name = "Xiaomi Mi Pro 2",
                            Price = 500.99m,
                            ProductType = 1,
                            Quantity = 15
                        },
                        new
                        {
                            Id = new Guid("d96bb9ea-2cea-4d39-bb90-e8a94d58a819"),
                            CompanyId = new Guid("5d652ebf-7b4d-430c-9af8-0c02b0256575"),
                            CreatedOn = new DateTime(2023, 2, 26, 8, 45, 25, 0, DateTimeKind.Unspecified),
                            ImageId = "64ce67d918f465b345e8e244",
                            IsDeleted = false,
                            Name = "Xiaomi Mi 365",
                            Price = 450.99m,
                            ProductType = 1,
                            Quantity = 30
                        },
                        new
                        {
                            Id = new Guid("d3b10c99-12e3-4e69-9771-70dafac10bb3"),
                            CompanyId = new Guid("5d652ebf-7b4d-430c-9af8-0c02b0256575"),
                            CreatedOn = new DateTime(2023, 5, 25, 8, 25, 25, 0, DateTimeKind.Unspecified),
                            ImageId = "64ce68eaffdd5b60bd0f0da6",
                            IsDeleted = false,
                            Name = "Xiaomi 365 Amg",
                            Price = 799.99m,
                            ProductType = 1,
                            Quantity = 5
                        },
                        new
                        {
                            Id = new Guid("0d233dd0-bd97-4bee-bc9e-dd96ccef5d12"),
                            CompanyId = new Guid("c0781351-133e-4383-81e7-c95e20fa1273"),
                            CreatedOn = new DateTime(2023, 3, 15, 8, 45, 25, 0, DateTimeKind.Unspecified),
                            ImageId = "64ce6ac5332b4fcd3cfbf213",
                            IsDeleted = false,
                            Name = "ADO A16XE",
                            Price = 1100.99m,
                            ProductType = 2,
                            Quantity = 15
                        },
                        new
                        {
                            Id = new Guid("f6b1216e-e1a6-4b83-a2b4-dc58f30d0e8e"),
                            CompanyId = new Guid("c0781351-133e-4383-81e7-c95e20fa1273"),
                            CreatedOn = new DateTime(2023, 7, 11, 4, 45, 25, 0, DateTimeKind.Unspecified),
                            ImageId = "64ce6e7274be46075f7f39ef",
                            IsDeleted = false,
                            Name = "ADO A20 AIR",
                            Price = 1000.99m,
                            ProductType = 2,
                            Quantity = 10
                        },
                        new
                        {
                            Id = new Guid("485b227b-69d8-4a3c-bf73-7f25007225c5"),
                            CompanyId = new Guid("5d652ebf-7b4d-430c-9af8-0c02b0256575"),
                            CreatedOn = new DateTime(2023, 7, 17, 8, 25, 25, 0, DateTimeKind.Unspecified),
                            ImageId = "64ce6fc7a61cf5992be7bf4f",
                            IsDeleted = false,
                            Name = "ADO 20 F BEAST",
                            Price = 2000.99m,
                            ProductType = 2,
                            Quantity = 5
                        },
                        new
                        {
                            Id = new Guid("3e044b98-8123-4273-b51f-9cf0dfc13760"),
                            CompanyId = new Guid("5d652ebf-7b4d-430c-9af8-0c02b0256575"),
                            CreatedOn = new DateTime(2023, 3, 3, 8, 45, 25, 0, DateTimeKind.Unspecified),
                            ImageId = "64ce7219abc83a6ff8f1da33",
                            IsDeleted = false,
                            Name = "Kaabo Bag",
                            Price = 50.99m,
                            ProductType = 3,
                            Quantity = 35
                        },
                        new
                        {
                            Id = new Guid("d2ab0180-a9b8-470e-8a0f-9acaccb0c9bc"),
                            CompanyId = new Guid("c0781351-133e-4383-81e7-c95e20fa1273"),
                            CreatedOn = new DateTime(2023, 7, 8, 8, 19, 25, 0, DateTimeKind.Unspecified),
                            ImageId = "64ce737583efd7dc2360de20",
                            IsDeleted = false,
                            Name = "Kaabo Disc Lock",
                            Price = 70.99m,
                            ProductType = 3,
                            Quantity = 10
                        },
                        new
                        {
                            Id = new Guid("8fe19082-5089-4ac5-88d9-51fdfa48fe10"),
                            CompanyId = new Guid("c0781351-133e-4383-81e7-c95e20fa1273"),
                            CreatedOn = new DateTime(2023, 6, 16, 6, 45, 25, 0, DateTimeKind.Unspecified),
                            ImageId = "64ce74f819d865ac7cfd73e6",
                            IsDeleted = false,
                            Name = "Xiaomi Side Mirrors",
                            Price = 40.99m,
                            ProductType = 3,
                            Quantity = 15
                        });
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Scooter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Battery")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("BrakesType")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ChargingTime")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EnginePower")
                        .HasColumnType("int");

                    b.Property<int>("EngineType")
                        .HasColumnType("int");

                    b.Property<int>("MaxLoad")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Range")
                        .HasColumnType("int");

                    b.Property<int>("TireSize")
                        .HasColumnType("int");

                    b.Property<int>("TopSpeed")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Scooters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3108d779-0c6e-4178-b309-5a9d4ee11d29"),
                            Battery = "Li-Ion 70V 35Ah",
                            BrakesType = 3,
                            Brand = "Kaabo",
                            ChargingTime = 12,
                            Color = "Black",
                            EnginePower = 2400,
                            EngineType = 2,
                            MaxLoad = 150,
                            Model = "Wolf Warrior 10",
                            ProductId = new Guid("bd96c711-32e7-483b-b1fe-9c19c1e0a936"),
                            Range = 110,
                            TireSize = 11,
                            TopSpeed = 80,
                            Type = 2,
                            Weight = 46
                        },
                        new
                        {
                            Id = new Guid("c1007106-b91c-4bba-9517-d91eec70cc91"),
                            Battery = "Li-Ion 60V 24.5Ah",
                            BrakesType = 3,
                            Brand = "Kaabo",
                            ChargingTime = 10,
                            Color = "Black",
                            EnginePower = 2000,
                            EngineType = 2,
                            MaxLoad = 120,
                            Model = "Mantis King",
                            ProductId = new Guid("1728dc0c-96d8-4869-886e-4829db33a103"),
                            Range = 100,
                            TireSize = 10,
                            TopSpeed = 70,
                            Type = 2,
                            Weight = 40
                        },
                        new
                        {
                            Id = new Guid("a4ac8b34-4a66-4022-a03f-ce8ca411a38f"),
                            Battery = "Li-Ion 60V 18.5Ah",
                            BrakesType = 2,
                            Brand = "Kaabo",
                            ChargingTime = 9,
                            Color = "Red",
                            EnginePower = 1000,
                            EngineType = 2,
                            MaxLoad = 120,
                            Model = "Mantis 10 Pro",
                            ProductId = new Guid("67245662-bc0a-4f41-b53e-a9fb4bbdaa9f"),
                            Range = 70,
                            TireSize = 10,
                            TopSpeed = 60,
                            Type = 5,
                            Weight = 30
                        },
                        new
                        {
                            Id = new Guid("f474d048-fd43-4795-a86b-1c77f57e2535"),
                            Battery = "Li-Ion 47V 12.5Ah",
                            BrakesType = 1,
                            Brand = "Xiaomi",
                            ChargingTime = 6,
                            Color = "Black",
                            EnginePower = 350,
                            EngineType = 1,
                            MaxLoad = 100,
                            Model = "Mi Pro 2",
                            ProductId = new Guid("253a48e4-63c2-4564-b911-b098f37d8370"),
                            Range = 45,
                            TireSize = 8,
                            TopSpeed = 25,
                            Type = 1,
                            Weight = 18
                        },
                        new
                        {
                            Id = new Guid("d29b190b-82f0-4b9a-bed8-002b3e2a464e"),
                            Battery = "Li-Ion 47V 10.5Ah",
                            BrakesType = 1,
                            Brand = "Xiaomi",
                            ChargingTime = 6,
                            Color = "White",
                            EnginePower = 300,
                            EngineType = 1,
                            MaxLoad = 100,
                            Model = "Mi 365",
                            ProductId = new Guid("d96bb9ea-2cea-4d39-bb90-e8a94d58a819"),
                            Range = 35,
                            TireSize = 8,
                            TopSpeed = 25,
                            Type = 1,
                            Weight = 17
                        },
                        new
                        {
                            Id = new Guid("22cc4ae0-2d70-45ee-8302-956fae8bbf0d"),
                            Battery = "Li-Ion 47V 13.5Ah",
                            BrakesType = 1,
                            Brand = "Xiaomi",
                            ChargingTime = 7,
                            Color = "Gray",
                            EnginePower = 400,
                            EngineType = 1,
                            MaxLoad = 120,
                            Model = "Mi Amg",
                            ProductId = new Guid("d3b10c99-12e3-4e69-9771-70dafac10bb3"),
                            Range = 40,
                            TireSize = 8,
                            TopSpeed = 25,
                            Type = 1,
                            Weight = 18
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ThinkElectric.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ThinkElectric.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThinkElectric.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ThinkElectric.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Accessory", b =>
                {
                    b.HasOne("ThinkElectric.Data.Models.Product", "Product")
                        .WithOne("Accessory")
                        .HasForeignKey("ThinkElectric.Data.Models.Accessory", "ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("ThinkElectric.Data.Models.Address", "Address")
                        .WithOne("User")
                        .HasForeignKey("ThinkElectric.Data.Models.ApplicationUser", "AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Bike", b =>
                {
                    b.HasOne("ThinkElectric.Data.Models.Product", "Product")
                        .WithOne("Bike")
                        .HasForeignKey("ThinkElectric.Data.Models.Bike", "ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Cart", b =>
                {
                    b.HasOne("ThinkElectric.Data.Models.ApplicationUser", "User")
                        .WithOne("Cart")
                        .HasForeignKey("ThinkElectric.Data.Models.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.CartItem", b =>
                {
                    b.HasOne("ThinkElectric.Data.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThinkElectric.Data.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Company", b =>
                {
                    b.HasOne("ThinkElectric.Data.Models.Address", "Address")
                        .WithOne("Company")
                        .HasForeignKey("ThinkElectric.Data.Models.Company", "AddressId");

                    b.HasOne("ThinkElectric.Data.Models.ApplicationUser", "User")
                        .WithOne("Company")
                        .HasForeignKey("ThinkElectric.Data.Models.Company", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Order", b =>
                {
                    b.HasOne("ThinkElectric.Data.Models.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.OrderItem", b =>
                {
                    b.HasOne("ThinkElectric.Data.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThinkElectric.Data.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Product", b =>
                {
                    b.HasOne("ThinkElectric.Data.Models.Company", "Company")
                        .WithMany("Products")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Review", b =>
                {
                    b.HasOne("ThinkElectric.Data.Models.Company", "Company")
                        .WithMany("Reviews")
                        .HasForeignKey("CompanyId");

                    b.HasOne("ThinkElectric.Data.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ThinkElectric.Data.Models.ApplicationUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Scooter", b =>
                {
                    b.HasOne("ThinkElectric.Data.Models.Product", "Product")
                        .WithOne("Scooter")
                        .HasForeignKey("ThinkElectric.Data.Models.Scooter", "ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Address", b =>
                {
                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Company");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Company", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ThinkElectric.Data.Models.Product", b =>
                {
                    b.Navigation("Accessory");

                    b.Navigation("Bike");

                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");

                    b.Navigation("Scooter");
                });
#pragma warning restore 612, 618
        }
    }
}
